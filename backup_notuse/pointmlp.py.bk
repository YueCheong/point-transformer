'''
https://github.com/ma-xu/pointMLP-pytorch/blob/main/classification_ModelNet40/models/pointmlp.py
'''
import torch
import torch.nn as nn
import torch.nn.functional as F
from pointmlp_utils import *
# from pointnet2_ops import pointnet2_utils

def cal_PointMLP_loss(pred, gold, smoothing=True):
    ''' Calculate cross entropy loss, apply label smoothing if needed. '''
    gold = gold.contiguous().view(-1)
    if smoothing:
        eps = 0.2
        n_class = pred.size(1)
        one_hot = torch.zeros_like(pred).scatter(1, gold.view(-1, 1), 1)
        one_hot = one_hot * (1 - eps) + (1 - one_hot) * eps / (n_class - 1)
        log_prb = F.log_softmax(pred, dim=1)
        loss = -(one_hot * log_prb).sum(dim=1).mean()
    else:
        loss = F.cross_entropy(pred, gold, reduction='mean')
    return loss

class LocalGrouper(nn.Module):
    def __init__(self, channel, groups, kneighbors, use_xyz=True, normalize="center", **kwargs):
        """
        Give xyz[b,p,3] and fea[b,p,d], return new_xyz[b,g,3] and new_fea[b,g,k,d]
        :param groups: groups number
        :param kneighbors: k-nerighbors
        :param kwargs: others
        """
        super(LocalGrouper, self).__init__()
        self.groups = groups
        self.kneighbors = kneighbors
        self.use_xyz = use_xyz
        if normalize is not None:
            self.normalize = normalize.lower()
        else:
            self.normalize = None
        if self.normalize not in ["center", "anchor"]:
            print(f"Unrecognized normalize parameter (self.normalize), set to None. Should be one of [center, anchor].")
            self.normalize = None
        if self.normalize is not None:
            add_channel=3 if self.use_xyz else 0 # ZY
            self.affine_alpha = nn.Parameter(torch.ones([1, 1, 1, channel + add_channel]))
            self.affine_beta = nn.Parameter(torch.zeros([1, 1, 1, channel + add_channel]))

    def forward(self, xyz, points):
        B, N, C = xyz.shape
        print(f'xyz.shape:{xyz.shape}\npoints.shape:{points.shape}')
        S = self.groups
        print(f'xyz.shape before contiguous:{xyz.shape}')
        xyz = xyz.contiguous()  # xyz [btach, points, xyz]
        print(f'xyz.shape after contiguous:{xyz.shape}')

        # fps_idx = torch.multinomial(torch.linspace(0, N - 1, steps=N).repeat(B, 1).to(xyz.device), num_samples=self.groups, replacement=False).long()
        fps_idx = farthest_point_sample(xyz, self.groups).long()
        print(f'fps_idx:{fps_idx}')
        # fps_idx = pointnet2_utils.furthest_point_sample(xyz, self.groups).long()  # [B, npoint]
        new_xyz = index_points(xyz, fps_idx)  # [B, npoint, 3]
        print(f'new_xyz.shape in LocalGrouper:{new_xyz.shape}')
        new_points = index_points(points, fps_idx)  # [B, npoint, d]

        idx = knn_point(self.kneighbors, xyz, new_xyz)
        # idx = query_ball_point(radius, nsample, xyz, new_xyz)
        grouped_xyz = index_points(xyz, idx)  # [B, npoint, k, 3]
        grouped_points = index_points(points, idx)  # [B, npoint, k, d]
        if self.use_xyz:
            grouped_points = torch.cat([grouped_points, grouped_xyz],dim=-1)  # [B, npoint, k, d+3] [2, 512, 24, 64+3]
            print(f'grouped_points.shape:{grouped_points.shape}')
        if self.normalize is not None:
            if self.normalize =="center":
                mean = torch.mean(grouped_points, dim=2, keepdim=True)
            if self.normalize =="anchor":
                print(f'!!this is anchor, new_xyz.shape:{new_xyz.shape}\nnew_ponts.shape:{new_points.shape}')
                mean = torch.cat([new_points, new_xyz],dim=-1) if self.use_xyz else new_points
                mean = mean.unsqueeze(dim=-2)  # [B, npoint, 1, d+3]  [2, 512, 1, 64+3]
                print(f'mean.shape:{mean.shape}')
            std = torch.std((grouped_points-mean).reshape(B,-1),dim=-1,keepdim=True).unsqueeze(dim=-1).unsqueeze(dim=-1) # [2, 1, 1, 1]
            print(f'std.shape:{std.shape}')
            grouped_points = (grouped_points-mean)/(std + 1e-5) # [2, 512, 24, 67]
            print(f'!! grouped_points.shape after -mean / std:{grouped_points.shape}')
            print(f'self.affine_alpha.shape:{self.affine_alpha.shape}\nself.affine_beta.shape:{self.affine_beta.shape}')
            grouped_points = self.affine_alpha*grouped_points + self.affine_beta
            print(f'!!! grouped_points.shape after *alpha:{grouped_points.shape}')
        print(f'grouped_points.shape after normalize:{grouped_points.shape}')
        new_points = torch.cat([grouped_points, new_points.view(B, S, 1, -1).repeat(1, 1, self.kneighbors, 1)], dim=-1)
        print(f'new_xyz.shape:{new_xyz.shape}\nnew_ponts.shape:{new_points.shape}')
        return new_xyz, new_points


class ConvBNReLU1D(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=1, bias=True, activation='relu'):
        super(ConvBNReLU1D, self).__init__()
        self.act = get_activation(activation)
        self.net = nn.Sequential(
            nn.Conv1d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, bias=bias),
            nn.BatchNorm1d(out_channels),
            self.act
        )

    def forward(self, x):
        return self.net(x)


class ConvBNReLURes1D(nn.Module):
    def __init__(self, channel, kernel_size=1, groups=1, res_expansion=1.0, bias=True, activation='relu'):
        super(ConvBNReLURes1D, self).__init__()
        self.act = get_activation(activation)
        self.net1 = nn.Sequential(
            nn.Conv1d(in_channels=channel, out_channels=int(channel * res_expansion),
                      kernel_size=kernel_size, groups=groups, bias=bias),
            nn.BatchNorm1d(int(channel * res_expansion)),
            self.act
        )
        if groups > 1:
            self.net2 = nn.Sequential(
                nn.Conv1d(in_channels=int(channel * res_expansion), out_channels=channel,
                          kernel_size=kernel_size, groups=groups, bias=bias),
                nn.BatchNorm1d(channel),
                self.act,
                nn.Conv1d(in_channels=channel, out_channels=channel,
                          kernel_size=kernel_size, bias=bias),
                nn.BatchNorm1d(channel),
            )
        else:
            self.net2 = nn.Sequential(
                nn.Conv1d(in_channels=int(channel * res_expansion), out_channels=channel,
                          kernel_size=kernel_size, bias=bias),
                nn.BatchNorm1d(channel)
            )

    def forward(self, x):
        return self.act(self.net2(self.net1(x)) + x)


class PreExtraction(nn.Module):
    def __init__(self, channels, out_channels,  blocks=1, groups=1, res_expansion=1, bias=True,
                 activation='relu', use_xyz=True):
        """
        input: [b,g,k,d]: output:[b,d,g]
        :param channels:
        :param blocks:
        """
        super(PreExtraction, self).__init__()
        # in_channels = 3+2*channels if use_xyz else 2*channels
        in_channels = 3+2*channels if use_xyz else 2*channels  # ZY
        self.transfer = ConvBNReLU1D(in_channels, out_channels, bias=bias, activation=activation)
        operation = []
        for _ in range(blocks):
            operation.append(
                ConvBNReLURes1D(out_channels, groups=groups, res_expansion=res_expansion,
                                bias=bias, activation=activation)
            )
        self.operation = nn.Sequential(*operation)

    def forward(self, x):
        b, n, s, d = x.size()  # torch.Size([32, 512, 32, 6])
        print(f'x in PreExtraction:{x.shape}')
        x = x.permute(0, 1, 3, 2)
        x = x.reshape(-1, d, s)  # [1024, 131, 24]
        print(f'x.shape before transfer:{x.shape}')
        x = self.transfer(x)
        print(f'x.shape after transfer:{x.shape}')
        batch_size, _, _ = x.size()
        x = self.operation(x)  # [b, d, k]
        x = F.adaptive_max_pool1d(x, 1).view(batch_size, -1)
        x = x.reshape(b, n, -1).permute(0, 2, 1)
        return x


class PosExtraction(nn.Module):
    def __init__(self, channels, blocks=1, groups=1, res_expansion=1, bias=True, activation='relu'):
        """
        input[b,d,g]; output[b,d,g]
        :param channels:
        :param blocks:
        """
        super(PosExtraction, self).__init__()
        operation = []
        for _ in range(blocks):
            operation.append(
                ConvBNReLURes1D(channels, groups=groups, res_expansion=res_expansion, bias=bias, activation=activation)
            )
        self.operation = nn.Sequential(*operation)

    def forward(self, x):  # [b, d, g]
        return self.operation(x)


class Model(nn.Module):
    def __init__(self, num_points=1024, num_classes=40, embed_dim=64, groups=1, res_expansion=1.0,
                 activation="relu", bias=True, use_xyz=True, normalize="center",
                 dim_expansion=[2, 2, 2, 2], pre_blocks=[2, 2, 2, 2], pos_blocks=[2, 2, 2, 2],
                 k_neighbors=[32, 32, 32, 32], reducers=[2, 2, 2, 2], **kwargs):
        super(Model, self).__init__()
        self.stages = len(pre_blocks)
        self.num_classes = num_classes
        self.num_points = num_points
        if use_xyz:
            self.embedding = ConvBNReLU1D(7, embed_dim, bias=bias, activation=activation)
        else:
            self.embedding = ConvBNReLU1D(3, embed_dim, bias=bias, activation=activation)
        assert len(pre_blocks) == len(k_neighbors) == len(reducers) == len(pos_blocks) == len(dim_expansion), \
            "Please check stage number consistent for pre_blocks, pos_blocks k_neighbors, reducers."
        self.local_grouper_list = nn.ModuleList()
        self.pre_blocks_list = nn.ModuleList()
        self.pos_blocks_list = nn.ModuleList()
        last_channel = embed_dim
        anchor_points = self.num_points
        for i in range(len(pre_blocks)):
            out_channel = last_channel * dim_expansion[i]
            pre_block_num = pre_blocks[i]
            pos_block_num = pos_blocks[i]
            kneighbor = k_neighbors[i]
            reduce = reducers[i]
            anchor_points = anchor_points // reduce
            # append local_grouper_list
            local_grouper = LocalGrouper(last_channel, anchor_points, kneighbor, use_xyz, normalize)  # [b,g,k,d]
            self.local_grouper_list.append(local_grouper)
            # append pre_block_list
            pre_block_module = PreExtraction(last_channel, out_channel, pre_block_num, groups=groups,
                                             res_expansion=res_expansion,
                                             bias=bias, activation=activation, use_xyz=use_xyz)
            self.pre_blocks_list.append(pre_block_module)
            # append pos_block_list
            pos_block_module = PosExtraction(out_channel, pos_block_num, groups=groups,
                                             res_expansion=res_expansion, bias=bias, activation=activation)
            self.pos_blocks_list.append(pos_block_module)

            last_channel = out_channel

        self.act = get_activation(activation)
        self.classifier = nn.Sequential(
            nn.Linear(last_channel, 512),
            nn.BatchNorm1d(512),
            self.act,
            nn.Dropout(0.5),
            nn.Linear(512, 256),
            nn.BatchNorm1d(256),
            self.act,
            nn.Dropout(0.5),
            nn.Linear(256, self.num_classes)
        )

    def forward(self, x):
        xyz = x.permute(0, 2, 1)  # xyz.shape [b, n, 7] # x.shape [b, 7, n]
        xyz = xyz[:, :, :3] # ZY add
        print(f'xyz.shape in Model:{xyz.shape}')
        batch_size, _, _ = x.size()
        print(f'before embedding')
        x = self.embedding(x)  # B,D,N  # x.shape:[b, 64, n]
        print(f'after embedding x.shape:{x.shape}') 
        for i in range(self.stages):
            print(f'i===========:{i}')
            # Give xyz[b, p, 3] and fea[b, p, d], return new_xyz[b, g, 3] and new_fea[b, g, k, d]
            print(f'before i:{i}\nxyz.shape:{xyz.shape}\nx.shape:{x.shape}')
            xyz, x = self.local_grouper_list[i](xyz, x.permute(0, 2, 1))  # [b,g,3]  [b,g,k,d]

            print(f'after i:{i}\nxyz.shape:{xyz.shape}\nx.shape:{x.shape}')
            x = self.pre_blocks_list[i](x)  # [b,d,g]
            print(f'x.shape after pre_blocks:{x.shape}')  
            x = self.pos_blocks_list[i](x)  # [b,d,g]
            print(f'x.shape after pos_blocks:{x.shape}')            

        x = F.adaptive_max_pool1d(x, 1).squeeze(dim=-1)
        x = self.classifier(x)
        return x




def pointMLP(num_points=1024, num_classes=40, embed_dim=64, groups=1, res_expansion=1.0,
             activation="relu", bias=False, use_xyz=True, normalize="anchor",
             dim_expansion=[2, 2, 2, 2], pre_blocks=[2, 2, 2, 2], pos_blocks=[2, 2, 2, 2],
             k_neighbors=[24, 24, 24, 24], reducers=[2, 2, 2, 2], **kwargs) -> Model:
    return Model(points=num_points, num_classes=num_classes, embed_dim=embed_dim, groups=groups, res_expansion=res_expansion,
                   activation=activation, bias=bias, use_xyz=use_xyz, normalize=normalize,
                   dim_expansion=dim_expansion, pre_blocks=pre_blocks, pos_blocks=pos_blocks,
                   k_neighbors=k_neighbors, reducers=reducers, **kwargs)


def pointMLPElite(num_points=1024, num_classes=40, embed_dim=32, groups=1, res_expansion=0.25,
                   activation="relu", bias=False, use_xyz=True, normalize="anchor",
                   dim_expansion=[2, 2, 2, 1], pre_blocks=[1, 1, 2, 1], pos_blocks=[1, 1, 2, 1],
                   k_neighbors=[24,24,24,24], reducers=[2, 2, 2, 2], **kwargs) -> Model:
    return Model(points=num_points, num_classes=num_classes, embed_dim=embed_dim, groups=groups, res_expansion=res_expansion,
                   activation=activation, bias=bias, use_xyz=use_xyz, normalize=normalize,
                   dim_expansion=dim_expansion, pre_blocks=pre_blocks, pos_blocks=pos_blocks,
                   k_neighbors=k_neighbors, reducers=reducers, **kwargs)

if __name__ == '__main__':
    xyz = torch.rand(2, 7, 4096)
    points = torch.rand(2, 4, 4096)
    print("===> testing pointMLP ...")
    model = pointMLP(
        num_points=4096,
        num_classes=908 
        )
    out = model(xyz)
    print(out.shape)